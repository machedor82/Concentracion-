import streamlit as st
import pandas as pd
import zipfile
import plotly.express as px
import plotly.graph_objects as go
import joblib
import numpy as np

# ========================== CONFIGURACI√ìN INICIAL ==========================
st.set_page_config(page_title="BORRRADOR", layout="wide", initial_sidebar_state="collapsed")

st.markdown("""
    <style>
        [data-testid="stSidebar"] {
            background-color: #002244;
            color: white;
        }
        .stSlider > div[data-testid="stTickBar"] {
            background-color: #ffffff11;
        }
        .stSlider .css-14pt78w {
            color: white !important;
        }
        .stMultiSelect, .stSlider {
            color: black !important;
        }
        [data-testid="stSidebar"] label {
            color: white;
        }
        body {
            background-color: #f9f9f9;
            color: #1f1f1f;
        }
        .stTabs [data-baseweb="tab"] {
            font-size: 18px;
            padding: 10px;
            border-bottom: 3px solid transparent;
        }
        .stTabs [aria-selected="true"] {
            border-bottom: 3px solid #004b8d;
            color: #004b8d;
            font-weight: bold;
        }
    </style>
""", unsafe_allow_html=True)

st.title("üìä Panel BI")
tabs = st.tabs(["üè† Dashboard", "üßÆ Calculadora", "üîß Por definir"])

# ========================== PESTA√ëA 1 ==========================
with tabs[0]:
    st.subheader("üìÇ Cargar base de datos")
    uploaded_file = st.file_uploader("Sube un ZIP que contenga el archivo 'DF.csv'", type="zip")

    @st.cache_data
    def load_zip_csv(upload, internal_name="DF.csv"):
        with zipfile.ZipFile(upload) as z:
            with z.open(internal_name) as f:
                return pd.read_csv(f)

    df = df_filtrado = None

    if uploaded_file:
        try:
            df = load_zip_csv(uploaded_file)
            st.success("‚úÖ Datos cargados exitosamente")

            with st.sidebar:
                with st.expander("üéõÔ∏è Filtros", expanded=True):
                    categorias = df['Categor√≠a'].dropna().unique()
                    estados = df['estado_del_cliente'].dropna().unique()
                    a√±os = sorted(df['a√±o'].dropna().unique())
                    meses = sorted(df['mes'].dropna().unique())

                    categoria_sel = st.multiselect("Categor√≠a de producto", categorias, default=list(categorias))
                    estado_sel = st.multiselect("Estado del cliente", estados, default=list(estados))
                    a√±o_sel = st.multiselect("A√±o", a√±os, default=a√±os)
                    mes_sel = st.multiselect("Mes", meses, default=meses)

                with st.expander("üìè Filtros avanzados", expanded=False):
                    min_flete, max_flete = float(df['costo_relativo_envio'].min()), float(df['costo_relativo_envio'].max())
                    rango_flete = st.slider("Costo relativo de env√≠o (%)", min_value=round(min_flete, 2), max_value=round(max_flete, 2), value=(round(min_flete, 2), round(max_flete, 2)))

                    min_peso, max_peso = int(df['total_peso_g'].min()), int(df['total_peso_g'].max())
                    rango_peso = st.slider("Peso total del pedido (g)", min_value=min_peso, max_value=max_peso, value=(min_peso, max_peso))

            df_filtrado = df[
                (df['Categor√≠a'].isin(categoria_sel)) &
                (df['estado_del_cliente'].isin(estado_sel)) &
                (df['a√±o'].isin(a√±o_sel)) &
                (df['mes'].isin(mes_sel)) &
                (df['costo_relativo_envio'].between(*rango_flete)) &
                (df['total_peso_g'].between(*rango_peso))
            ]

            st.markdown("## üß≠ Visi√≥n General de la Operaci√≥n")
            with st.container():
                st.markdown("### üî¢ Indicadores")
                col1, col2, col3 = st.columns(3)

                col1.markdown(f"""
                    <div style='background:linear-gradient(135deg,#2196F3,#64B5F6);padding:20px;border-radius:15px;
                    text-align:center;box-shadow:2px 2px 10px rgba(0,0,0,0.1);color:white;'>
                    <div style='font-size:24px;'>üì¶ Total de pedidos</div>
                    <div style='font-size:36px;font-weight:bold;'>{len(df_filtrado):,}</div></div>
                """, unsafe_allow_html=True)

                pct_flete_alto = (df_filtrado['costo_de_flete'] / df_filtrado['precio'] > 0.5).mean() * 100
                col2.markdown(f"""
                    <div style='background:linear-gradient(135deg,#FDD835,#FFF176);padding:20px;border-radius:15px;
                    text-align:center;box-shadow:2px 2px 10px rgba(0,0,0,0.1);color:#333;'>
                    <div style='font-size:24px;'>üöö Flete > 50%</div>
                    <div style='font-size:36px;font-weight:bold;'>{pct_flete_alto:.1f}%</div></div>
                """, unsafe_allow_html=True)

                pct_anticipadas = (df_filtrado['desviacion_vs_promesa'] < -7).mean() * 100
                col3.markdown(f"""
                    <div style='background:linear-gradient(135deg,#66BB6A,#A5D6A7);padding:20px;border-radius:15px;
                    text-align:center;box-shadow:2px 2px 10px rgba(0,0,0,0.1);color:white;'>
                    <div style='font-size:24px;'>‚è±Ô∏è Entregas ‚â•7 d√≠as antes</div>
                    <div style='font-size:36px;font-weight:bold;'>{pct_anticipadas:.1f}%</div></div>
                """, unsafe_allow_html=True)

            st.markdown("### üìä An√°lisis visual")
            col1, col2 = st.columns(2)

            with col1:
                st.subheader("üå≥ Treemap por categor√≠a")
                fig_tree = px.treemap(df_filtrado, path=['Categor√≠a'], values='precio', color='Categor√≠a', color_discrete_sequence=px.colors.qualitative.Pastel)
                st.plotly_chart(fig_tree, use_container_width=True)

            with col2:
                st.subheader("üó∫Ô∏è Mapa de entregas de clientes")
                df_mapa = df_filtrado.dropna(subset=['lat_cliente', 'lon_cliente'])
                if not df_mapa.empty:
                    st.map(df_mapa.rename(columns={'lat_cliente': 'lat', 'lon_cliente': 'lon'})[['lat', 'lon']])
                else:
                    st.warning("‚ö†Ô∏è No hay ubicaciones para mostrar con los filtros actuales.")

            st.download_button("‚¨áÔ∏è Descargar datos filtrados", df_filtrado.to_csv(index=False), "datos_filtrados.csv", "text/csv")

            st.markdown("### ü§ñ Modelos de predicci√≥n")
            col1, col2 = st.columns(2)
            col1.success("Modelo de clasificaci√≥n de d√≠as de entrega: Accuracy ~69%, F1 ~68")
            col2.success("Modelo de regresi√≥n del flete: R¬≤ ~0.71")
            st.caption("Estos modelos pueden usarse para consolidar entregas, prevenir sobrecostos y predecir el precio antes de la compra.")

        except Exception as e:
            st.error(f"‚ö†Ô∏è Error al cargar los datos: {e}")

# ========================== PESTA√ëA 2 ==========================
# Aqu√≠ sigue tu c√≥digo de la calculadora, lo dej√© fuera por l√≠mite de caracteres.
with tabs[1]:
    st.subheader("üßÆ Herramienta de C√°lculo")
 # üìÇ Subida de archivo estilo ZIP uploader
    st.subheader("üìÇ Cargar base de datos CSV")
    archivo_subido = st.file_uploader("Sube tu archivo CSV con pedidos", type=["csv"])

    if archivo_subido:
        df = pd.read_csv(archivo_subido)
        st.success("‚úÖ Archivo CSV cargado exitosamente")
    else:
        st.warning("Por favor, carga un archivo CSV para continuar.")
        st.stop()

    modelo_flete = joblib.load('modelo_costoflete.sav')
    modelo_dias = joblib.load('modelo_dias_pipeline.joblib')
    label_encoder = joblib.load('label_encoder_dias.joblib')

    meses_dict = {
        1: "Enero", 2: "Febrero", 3: "Marzo", 4: "Abril", 5: "Mayo", 6: "Junio",
        7: "Julio", 8: "Agosto", 9: "Septiembre", 10: "Octubre", 11: "Noviembre", 12: "Diciembre"
    }

    st.title("Predicci√≥n de Costo de Flete y Clase de Entrega por Ciudad y Categor√≠a")

    st.sidebar.header("Carga tu archivo de datos")
    archivo_subido = st.sidebar.file_uploader("Sube tu CSV con pedidos", type=["csv"])

    if archivo_subido:
        df = pd.read_csv(archivo_subido)
    else:
        st.warning("Por favor, carga un archivo CSV para continuar.")
        st.stop()

    df['orden_compra_timestamp'] = pd.to_datetime(df['orden_compra_timestamp'])
    df['a√±o'] = df['orden_compra_timestamp'].dt.year
    df['mes'] = df['orden_compra_timestamp'].dt.month

    estado = st.sidebar.selectbox("Estado", sorted(df['estado_del_cliente'].dropna().unique()))
    categorias = sorted(df['Categor√≠a'].dropna().unique())
    categoria = st.sidebar.selectbox("Categor√≠a", categorias)

    col1, col2 = st.columns(2)
    with col1:
        mes1_nombre = st.selectbox("Mes 1", list(meses_dict.values()), index=0)
    with col2:
        mes2_nombre = st.selectbox("Mes 2", list(meses_dict.values()), index=1)

    mes1_num = [k for k, v in meses_dict.items() if v == mes1_nombre][0]
    mes2_num = [k for k, v in meses_dict.items() if v == mes2_nombre][0]

    filtro = (df['estado_del_cliente'] == estado) & (df['Categor√≠a'] == categoria)
    df_mes1 = df[(df['mes'] == mes1_num) & filtro].copy()
    df_mes2 = df[(df['mes'] == mes2_num) & filtro].copy()

    def predecir(df_input):
        if df_input.empty:
            return df_input

        columnas_flete = ['total_peso_g', 'precio', '#_deproductos', 'duracion_estimada_min', 'ciudad_cliente',
                          'nombre_dc', 'hora_compra', 'a√±o', 'mes', 'datetime_origen', 'region',
                          'dias_promedio_ciudad', 'Categor√≠a', 'tipo_de_pago']

        df_flete = df_input[columnas_flete].copy()
        df_encoded = pd.get_dummies(df_flete)
        columnas_entrenadas = modelo_flete.get_booster().feature_names
        df_encoded = df_encoded.reindex(columns=columnas_entrenadas, fill_value=0)

        df_input['costo_estimado'] = modelo_flete.predict(df_encoded)
        df_input['costo_estimado'] = df_input['costo_estimado'].round(2)
        df_input['costo_de_flete'] = df_input['costo_estimado']

        cols_dias = ['Categor√≠a', 'categor√≠a_peso', '#_deproductos', 'total_peso_g', 'precio', 'costo_de_flete',
                     'distancia_km', 'velocidad_kmh', 'duracion_estimada_min', 'region', 'dc_asignado',
                     'es_feriado', 'es_fin_de_semana', 'dias_promedio_ciudad', 'hora_compra',
                     'nombre_dia', 'mes', 'a√±o', 'temp_origen', 'precip_origen', 'cloudcover_origen',
                     'conditions_origen', 'icon_origen', 'traffic', 'area']

        faltantes = [col for col in cols_dias if col not in df_input.columns]
        if faltantes:
            st.error(f"Faltan columnas para la predicci√≥n de clase de entrega: {faltantes}")
            return df_input

        X_dias = df_input[cols_dias].copy()
        if X_dias.empty:
            return df_input

        clase_pred = modelo_dias.predict(X_dias)
        df_input['clase_entrega'] = label_encoder.inverse_transform(clase_pred)

        return df_input

    def agrupar_resultados(df, nombre_mes):
        if 'costo_estimado' in df.columns and 'clase_entrega' in df.columns:
            return df.groupby('ciudad_cliente').agg({
                'costo_estimado': lambda x: round(x.mean(), 2),
                'clase_entrega': lambda x: x.mode()[0] if not x.mode().empty else 'NA'
            }).rename(columns={
                'costo_estimado': nombre_mes,
                'clase_entrega': f"Entrega {nombre_mes}"
            }).reset_index()
        else:
            st.warning(f"No se pudo calcular el costo de flete o la clase de entrega para {nombre_mes}.")
            return pd.DataFrame(columns=['ciudad_cliente', nombre_mes, f"Entrega {nombre_mes}"])

    df_mes1 = predecir(df_mes1)
    df_mes2 = predecir(df_mes2)

    res1 = agrupar_resultados(df_mes1, mes1_nombre)
    res2 = agrupar_resultados(df_mes2, mes2_nombre)

    comparacion = pd.merge(res1, res2, on='ciudad_cliente', how='outer')
    comparacion['Diferencia'] = (comparacion[mes2_nombre] - comparacion[mes1_nombre]).round(2)

    comparacion = comparacion[[
        'ciudad_cliente',
        mes1_nombre,
        mes2_nombre,
        'Diferencia',
        f"Entrega {mes1_nombre}",
        f"Entrega {mes2_nombre}"
    ]].rename(columns={'ciudad_cliente': 'Ciudad'})

    def resaltar_diferencia(val):
        if isinstance(val, (int, float)):
            if val > 0:
                return 'color: green; font-weight: bold'
            elif val < 0:
                return 'color: red; font-weight: bold'
        return ''

    styled_df = (
        comparacion.style
        .applymap(resaltar_diferencia, subset=['Diferencia'])
        .format(precision=2)
    )

    st.subheader(f"Comparaci√≥n entre {mes1_nombre} y {mes2_nombre} en {estado} para categor√≠a {categoria}")
    st.write(styled_df)

    csv = comparacion.to_csv(index=False).encode('utf-8')
    st.download_button(
        label="Descargar CSV de Comparaci√≥n",
        data=csv,
        file_name=f'comparacion_{estado}{categoria}{mes1_nombre}vs{mes2_nombre}.csv',
        mime='text/csv'
    )
